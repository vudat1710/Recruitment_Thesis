{"ast":null,"code":"import axios from 'axios';\nimport setAuthToken from '../utils/setAuthTokens';\nimport { GET_ERRORS, SET_CURRENT_USER, FORGET_PASSWORD, CHANGE_PASSWORD } from './actionTypes';\nimport { clearCurrentProfile } from './user.action';\nexport const registerUser = (userData, history) => dispatch => {\n  axios.post('api/here', userData).then(res => {\n    if (res.data.status === 400) {\n      dispatch({\n        type: GET_ERRORS,\n        payload: res.data\n      });\n    } else history.push('/login');\n  }).catch(err => {\n    dispatch({\n      type: GET_ERRORS,\n      payload: err.data\n    });\n  });\n};\nexport const loginUser = userData => dispatch => {\n  axios.post('api/here', userData).then(res => {\n    // save to LocalStorage\n    if (res.data.status !== 400) {\n      const token = res.data.id;\n      const user_id = res.data.userId; //set token to ls\n\n      localStorage.setItem('jwtToken', token);\n      localStorage.setItem('userId', user_id);\n      localStorage.setItem('ttl', res.data.ttl); // set token to Auth header\n\n      setAuthToken(token); //Set Current user\n\n      dispatch(setCurrentUser(token));\n    } else {\n      return dispatch({\n        type: GET_ERRORS,\n        payload: res.data\n      });\n    }\n  }).catch(err => {\n    return dispatch({\n      type: GET_ERRORS,\n      payload: err.data\n    });\n  });\n};\nexport const setCurrentUser = token => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: token\n  };\n};\nexport const forgetPassword = email => dispatch => {\n  axios.post(`customer/forgotPass`, {\n    email: email\n  }).then(res => {\n    if (res.data.status === 400) {\n      dispatch({\n        type: GET_ERRORS,\n        payload: res.data\n      });\n    } else {\n      dispatch({\n        type: GET_ERRORS,\n        payload: {}\n      });\n      dispatch({\n        type: FORGET_PASSWORD,\n        payload: 'success'\n      });\n    }\n  });\n};\nexport const changePassword = (password1, password2, passwordOld) => async dispatch => {\n  const userId = localStorage.userId;\n  const res = await axios.post(`customer/resetPass`, {\n    userId: userId,\n    pass1: password1,\n    pass2: password2,\n    passOld: passwordOld\n  });\n\n  if (res.status === 204) {\n    dispatch({\n      type: CHANGE_PASSWORD,\n      payload: 'success'\n    });\n    dispatch({\n      type: GET_ERRORS,\n      payload: {}\n    });\n  } else {\n    dispatch({\n      type: CHANGE_PASSWORD,\n      payload: 'failed'\n    });\n    dispatch({\n      type: GET_ERRORS,\n      payload: res.data\n    });\n  } // })\n\n}; // Log user out\n\nexport const logoutUser = () => dispatch => {\n  axios.post('customer/logout').then(res => {\n    // Remove token from localStorage\n    localStorage.removeItem('jwtToken');\n    localStorage.removeItem('userId');\n    localStorage.removeItem('ttl'); // Remove auth header for future requests\n\n    setAuthToken(false); // Set current user to {} which will set isAuthenticated to false\n\n    dispatch(setCurrentUser({})); //Remove user profile\n\n    dispatch(clearCurrentProfile());\n  });\n};","map":{"version":3,"sources":["/home/vudat1710/Downloads/Thesis/Recruitment_Thesis/web_app/src/actions/auth.action.js"],"names":["axios","setAuthToken","GET_ERRORS","SET_CURRENT_USER","FORGET_PASSWORD","CHANGE_PASSWORD","clearCurrentProfile","registerUser","userData","history","dispatch","post","then","res","data","status","type","payload","push","catch","err","loginUser","token","id","user_id","userId","localStorage","setItem","ttl","setCurrentUser","forgetPassword","email","changePassword","password1","password2","passwordOld","pass1","pass2","passOld","logoutUser","removeItem"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport setAuthToken from '../utils/setAuthTokens';\nimport { GET_ERRORS, SET_CURRENT_USER, FORGET_PASSWORD, CHANGE_PASSWORD } from './actionTypes';\nimport { clearCurrentProfile } from './user.action';\n\nexport const registerUser = (userData, history) => dispatch => {\n  axios\n    .post('api/here', userData)\n    .then(res => {\n      if (res.data.status === 400){\n        dispatch({\n          type: GET_ERRORS,\n          payload: res.data,\n        });\n      }\n      else history.push('/login')\n    })\n    .catch(err => {\n      dispatch({\n        type: GET_ERRORS,\n        payload: err.data,\n      });\n    });\n};\n\nexport const loginUser = userData => dispatch => {\n  axios\n    .post('api/here', userData)\n    .then(res => {\n      // save to LocalStorage\n      if (res.data.status !== 400) {\n        const token = res.data.id;\n        const user_id = res.data.userId;\n\n        //set token to ls\n        localStorage.setItem('jwtToken', token);\n        localStorage.setItem('userId', user_id);\n        localStorage.setItem('ttl', res.data.ttl);\n        // set token to Auth header\n        setAuthToken(token);\n        //Set Current user\n        dispatch(setCurrentUser(token));\n      } else {\n        return dispatch({\n          type: GET_ERRORS,\n          payload: res.data,\n        });\n      }\n    })\n    .catch(err => {\n      return dispatch({\n        type: GET_ERRORS,\n        payload: err.data,\n      });\n    });\n};\n\nexport const setCurrentUser = token => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: token,\n  };\n};\n\nexport const forgetPassword = (email) => dispatch => {\n  axios.post(`customer/forgotPass`, {email: email})\n  .then(res => {\n    if (res.data.status === 400){\n      dispatch({\n        type: GET_ERRORS,\n        payload: res.data\n      })\n    } else{\n      dispatch({\n        type: GET_ERRORS,\n        payload: {}\n      })\n      dispatch({\n        type: FORGET_PASSWORD,\n        payload: 'success'\n      })\n    }\n  })\n}\n\nexport const changePassword = (password1, password2, passwordOld) => async dispatch => {\n  const userId = localStorage.userId\n  const res = await axios.post(`customer/resetPass`, {userId: userId, pass1: password1, pass2: password2, passOld: passwordOld})\n  if (res.status === 204){\n    dispatch({\n      type: CHANGE_PASSWORD,\n      payload: 'success'\n    })\n    dispatch({\n      type: GET_ERRORS,\n      payload: {}\n    })\n  } else{\n    dispatch({\n      type: CHANGE_PASSWORD,\n      payload: 'failed'\n    })\n    dispatch({\n      type: GET_ERRORS,\n      payload: res.data\n    }) \n  }\n  // })\n}\n\n// Log user out\nexport const logoutUser = () => dispatch => {\n  axios\n  .post('customer/logout')\n  .then( res => {\n  // Remove token from localStorage\n  localStorage.removeItem('jwtToken');\n  localStorage.removeItem('userId')\n  localStorage.removeItem('ttl')\n  // Remove auth header for future requests\n  setAuthToken(false);\n  // Set current user to {} which will set isAuthenticated to false\n  dispatch(setCurrentUser({}));\n  //Remove user profile\n  dispatch(clearCurrentProfile());\n  })\n};\n"]},"metadata":{},"sourceType":"module"}